#include <stdio.h>
#include <unistd.h> /* for fork() */
#include <sys/wait.h> /* for wait() */
#include <sys/types.h> /* for wait() kill(2) */
#include <sys/ipc.h> /* for shmget() shmctl() */
#include <sys/shm.h> /* for shmget() shmctl() */
#include <signal.h> /* for signal(2) kill(2) */
#include <errno.h> /* for perror */
#include <stdlib.h>

int main()
{
   key_t k=ftok("matmult.c",65);
   int arr[5];
   int shmid= shmget(k,5*sizeof(int), IPC_CREAT|0777);
   
   int *shared_mat=shmat(shmid,NULL,0);
   printf("Enter the variables\n");
   for(int i=0;i<5;i++)
   {
      scanf("%d",shared_mat[i]);
   }
   pid_t p=fork();
   if(p<0)
   {
    perror("Error");
    exit(EXIT_FAILURE);
    }
   else if(p==0)
   {
     
     for(int i=0;i<5;i++)
     {  
        printf("%d\t", shared_mat[i]);
     }
     exit(0);
   }
   else
   {
      int status;
      waitpid(p, &status, 0);
      if (status == 0)
         printf("Child process with pid %d completed successfully.\n", p);      
   }
   shmdt(shared_mat);
   return 0;
   
   }
       
